version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    user: "0:0"
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    user: "0:0"
    container_name: kafka
    ports:
      - "9093:9093"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: "example-topic:1:1"
    depends_on:
      - zookeeper

  postgres:
    image: postgres:16.1 
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
    volumes:
      - ./postgres-data:/var/lib/postgresql/data

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
    depends_on:
      - kafka
      - postgres
    restart: on-failure

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    environment:
      - TELEGRAM_TOKEN_FILE=${TELEGRAM_TOKEN_FILE}
      - OPENWEATHERMAP_API_KEY_FILE=${OPENWEATHERMAP_API_KEY_FILE}
    # volumes: 
    #   - ./producer/tokenBot2.txt:/app/tokenBot2.txt
    #   - ./producer/apiKey2.txt:/app/apiKey2.txt

    depends_on:
      - kafka
    restart: on-failure





